diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8cd3633b877..21b9f946b2a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -54,6 +54,11 @@ IF(WIN32)
       CMAKE_MINIMUM_REQUIRED(VERSION 3.15.3)
     ENDIF()
   ENDIF()
+  cmake_policy(SET CMP0091 NEW)
+  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
+  SET(WITHOUT_SERVER ON CACHE BOOL "" FORCE)
+  SET(WITH_UNIT_TESTS OFF CACHE BOOL "" FORCE)
+  SET(LINK_STATIC_RUNTIME_LIBRARIES ON CACHE BOOL "" FORCE)
 ELSEIF(APPLE)
   # Version 3.12.4 is needed because the new build system of Xcode is not
   # supported by cmake. 3.12.4 will force using the legacy build system.
@@ -661,7 +666,7 @@ MESSAGE(STATUS "SIZEOF_VOIDP ${SIZEOF_VOIDP}")
 # even if we have configured for 64bit build....
 SET(CMAKE_SIZEOF_VOID_P ${SIZEOF_VOIDP})
 IF(NOT SIZEOF_VOIDP EQUAL 8)
-  MESSAGE(FATAL_ERROR "MySQL supports only 64-bit platforms.")
+#  MESSAGE(FATAL_ERROR "MySQL supports only 64-bit platforms.")
 ENDIF()
 
 INCLUDE(compile_flags)
diff --git a/cmake/os/Windows.cmake b/cmake/os/Windows.cmake
index f13bbdf5fff..fee48b56d28 100644
--- a/cmake/os/Windows.cmake
+++ b/cmake/os/Windows.cmake
@@ -62,6 +62,8 @@ IF(CMAKE_SIZEOF_VOID_P MATCHES 8)
 ELSE()
   IF(WITHOUT_SERVER)
     MESSAGE(WARNING "32bit is experimental!!")
+    SET(SYSTEM_TYPE "Win32")
+    SET(MYSQL_MACHINE_TYPE "x86")
   ELSE()
     MESSAGE(FATAL_ERROR "32 bit Windows builds are not supported. "
       "Clean the build dir and rebuild using -G \"${CMAKE_GENERATOR} Win64\"")
diff --git a/cmake/ssl.cmake b/cmake/ssl.cmake
index 932659d030f..c2e47fc260d 100644
--- a/cmake/ssl.cmake
+++ b/cmake/ssl.cmake
@@ -197,7 +197,7 @@ FUNCTION(FIND_OPENSSL_EXECUTABLE)
     FIND_PROGRAM(OPENSSL_EXECUTABLE openssl)
   ENDIF()
 
-  IF(OPENSSL_EXECUTABLE)
+  IF(OFF) #OPENSSL_EXECUTABLE)
     SET(OPENSSL_EXECUTABLE_HAS_ZLIB 0)
     EXECUTE_PROCESS(
       COMMAND ${OPENSSL_EXECUTABLE} "list-cipher-commands"
@@ -807,6 +807,13 @@ MACRO(MYSQL_CHECK_SSL_DLLS)
         SET(SSL_MSVC_VERSION_SUFFIX "-3")
         SET(SSL_MSVC_ARCH_SUFFIX "-x64")
       ENDIF()
+      IF("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
+        SET(SSL_MSVC_ARCH_SUFFIX "")
+      ELSEIF("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
+        SET(SSL_MSVC_ARCH_SUFFIX "-x64")
+      ELSEIF("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "ARM64")
+        SET(SSL_MSVC_ARCH_SUFFIX "-arm64")
+      ENDIF()
 
       FIND_FILE(HAVE_CRYPTO_DLL
         NAMES
diff --git a/extra/libcno/CMakeLists.txt b/extra/libcno/CMakeLists.txt
index 2cc3a795f59..e1da34163a7 100644
--- a/extra/libcno/CMakeLists.txt
+++ b/extra/libcno/CMakeLists.txt
@@ -32,9 +32,14 @@ MYSQL_ADD_EXECUTABLE(
   SKIP_INSTALL
   EXCLUDE_FROM_ALL
   )
+IF(WIN32 AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "ARM64")
+  SET(cno_huffman_generator_CMD "${CMAKE_BINARY_DIR}/../build-x64/runtime_output_directory/RelWithDebInfo/cno_huffman_generator.exe")
+ELSE()
+  SET(cno_huffman_generator_CMD cno_huffman_generator)
+ENDIF()
 ADD_CUSTOM_COMMAND(
   OUTPUT "${LIBCNO_GENERATE_DIR}/hpack-data.h"
-  COMMAND cno_huffman_generator
+  COMMAND ${cno_huffman_generator_CMD}
   ARGS "${LIBCNO_GENERATE_DIR}/hpack-data.h"
   DEPENDS
   cno_huffman_generator
diff --git a/scripts/CMakeLists.txt b/scripts/CMakeLists.txt
index 9ebe10bdb51..4ea0fa5496a 100644
--- a/scripts/CMakeLists.txt
+++ b/scripts/CMakeLists.txt
@@ -54,11 +54,17 @@ ELSE()
   MESSAGE(FATAL_ERROR "Cannot concatenate files")
 ENDIF()
 
+IF(WIN32 AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "ARM64")
+  SET(comp_sql_CMD "${CMAKE_BINARY_DIR}/../build-x64/runtime_output_directory/RelWithDebInfo/comp_sql.exe")
+ELSE()
+  SET(comp_sql_CMD comp_sql)
+ENDIF()
+
 # Build mysql_fix_privilege_tables.h
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/mysql_fix_privilege_tables_sql.h
   ${CAT_COMMAND}
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   mysql_fix_privilege_tables
   mysql_fix_privilege_tables.sql
   mysql_fix_privilege_tables_sql.h
@@ -76,7 +82,7 @@ MY_ADD_CUSTOM_TARGET(GenFixPrivs
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_data.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   mysql_system_data
   ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables_data.sql
   sql_commands_system_data.h
@@ -87,7 +93,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_tables_data_fix.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   mysql_system_tables_data_fix
   ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables_data_fix.sql
   sql_commands_system_tables_data_fix.h
@@ -98,7 +104,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_tables.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   mysql_system_tables
   ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables.sql
   sql_commands_system_tables.h
@@ -109,7 +115,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_users.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   mysql_system_users
   ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_users.sql
   sql_commands_system_users.h
@@ -120,7 +126,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_help_data.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   fill_help_tables
   ${CMAKE_CURRENT_SOURCE_DIR}/fill_help_tables.sql
   sql_commands_help_data.h
@@ -131,7 +137,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_set_firewall_mode.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   firewall_sp_set_firewall_mode
   ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_set_firewall_mode.sql
   sql_firewall_sp_set_firewall_mode.h
@@ -142,7 +148,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_reload_firewall_rules.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   firewall_sp_reload_firewall_rules
   ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_reload_firewall_rules.sql
   sql_firewall_sp_reload_firewall_rules.h
@@ -153,7 +159,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_set_firewall_group_mode.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   firewall_sp_set_firewall_group_mode
   ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_set_firewall_group_mode.sql
   sql_firewall_sp_set_firewall_group_mode.h
@@ -164,7 +170,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_set_firewall_group_mode_and_user.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   firewall_sp_set_firewall_group_mode_and_user
   ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_set_firewall_group_mode_and_user.sql
   sql_firewall_sp_set_firewall_group_mode_and_user.h
@@ -175,7 +181,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_reload_firewall_group_rules.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   firewall_sp_reload_firewall_group_rules
   ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_reload_firewall_group_rules.sql
   sql_firewall_sp_reload_firewall_group_rules.h
@@ -186,7 +192,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_firewall_group_enlist.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   firewall_sp_firewall_group_enlist
   ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_firewall_group_enlist.sql
   sql_firewall_sp_firewall_group_enlist.h
@@ -197,7 +203,7 @@ ADD_CUSTOM_COMMAND(
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_firewall_group_delist.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   firewall_sp_firewall_group_delist
   ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_firewall_group_delist.sql
   sql_firewall_sp_firewall_group_delist.h
diff --git a/scripts/sys_schema/CMakeLists.txt b/scripts/sys_schema/CMakeLists.txt
index 1d3295e8d4f..08327e3026c 100644
--- a/scripts/sys_schema/CMakeLists.txt
+++ b/scripts/sys_schema/CMakeLists.txt
@@ -205,10 +205,16 @@ ADD_CUSTOM_COMMAND(
 MY_ADD_CUSTOM_TARGET(all_sys_schema
   DEPENDS ALL_SYS_SCHEMA.sql)
 
+IF(WIN32 AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "ARM64")
+  SET(comp_sql_CMD "${CMAKE_BINARY_DIR}/../build-x64/runtime_output_directory/RelWithDebInfo/comp_sql.exe")
+ELSE()
+  SET(comp_sql_CMD comp_sql)
+ENDIF()
+
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands.h
-  COMMAND comp_sql
+  COMMAND ${comp_sql_CMD}
   mysql_sys_schema
   ${CMAKE_CURRENT_BINARY_DIR}/ALL_SYS_SCHEMA.sql
   sql_commands.h
diff --git a/sql-common/client.cc b/sql-common/client.cc
index 891a29a897c..43b9a74c250 100644
--- a/sql-common/client.cc
+++ b/sql-common/client.cc
@@ -8600,9 +8600,9 @@ int STDCALL mysql_options(MYSQL *mysql, enum mysql_option option,
       mysql->options.report_data_truncation = *static_cast<const bool *>(arg);
       break;
     case MYSQL_OPT_RECONNECT:
-      fprintf(stderr,
-              "WARNING: MYSQL_OPT_RECONNECT is deprecated and will be "
-              "removed in a future version.\n");
+      // fprintf(stderr,
+      //         "WARNING: MYSQL_OPT_RECONNECT is deprecated and will be "
+      //         "removed in a future version.\n");
       mysql->reconnect = *static_cast<const bool *>(arg);
       break;
     case MYSQL_OPT_BIND:
@@ -8930,9 +8930,9 @@ int STDCALL mysql_get_option(MYSQL *mysql, enum mysql_option option,
           mysql->options.report_data_truncation;
       break;
     case MYSQL_OPT_RECONNECT:
-      fprintf(stderr,
-              "WARNING: MYSQL_OPT_RECONNECT is deprecated and will be "
-              "removed in a future version.\n");
+      // fprintf(stderr,
+      //         "WARNING: MYSQL_OPT_RECONNECT is deprecated and will be "
+      //         "removed in a future version.\n");
       *(const_cast<bool *>(static_cast<const bool *>(arg))) = mysql->reconnect;
       break;
     case MYSQL_OPT_BIND:
diff --git a/strings/CMakeLists.txt b/strings/CMakeLists.txt
index ee363b78bd5..61cfd5890ad 100644
--- a/strings/CMakeLists.txt
+++ b/strings/CMakeLists.txt
@@ -69,9 +69,15 @@ SET(ZH_HANS_DST_FILE ${CMAKE_BINARY_DIR}/strings/uca900_zh_tbls.cc)
 SET(JA_HANS_SRC_FILE ${CMAKE_SOURCE_DIR}/strings/lang_data/ja_hans.txt)
 SET(JA_HANS_DST_FILE ${CMAKE_BINARY_DIR}/strings/uca900_ja_tbls.cc)
 
+IF(WIN32 AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "ARM64")
+  SET(uca9dump_CMD "${CMAKE_BINARY_DIR}/../build-x64/runtime_output_directory/RelWithDebInfo/uca9dump.exe")
+ELSE()
+  SET(uca9dump_CMD uca9dump)
+ENDIF()
+
 ADD_CUSTOM_COMMAND(
   OUTPUT ${JA_HANS_DST_FILE}
-  COMMAND uca9dump ja
+  COMMAND ${uca9dump_CMD} ja
   --in_file=${JA_HANS_SRC_FILE}
   --out_file=${JA_HANS_DST_FILE}
   DEPENDS uca9dump ${JA_HANS_SRC_FILE}
@@ -80,7 +86,7 @@ ADD_CUSTOM_TARGET(strings_ja_hans DEPENDS ${JA_HANS_DST_FILE})
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${ZH_HANS_DST_FILE}
-  COMMAND uca9dump zh
+  COMMAND ${uca9dump_CMD} zh
   --in_file=${ZH_HANS_SRC_FILE}
   --out_file=${ZH_HANS_DST_FILE}
   DEPENDS uca9dump ${ZH_HANS_SRC_FILE}
diff --git a/utilities/CMakeLists.txt b/utilities/CMakeLists.txt
index d38157e00a4..dfb166e47a8 100644
--- a/utilities/CMakeLists.txt
+++ b/utilities/CMakeLists.txt
@@ -45,8 +45,14 @@ MYSQL_ADD_EXECUTABLE(comp_client_err
   SKIP_INSTALL
   )
 
+IF(WIN32 AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "ARM64")
+  SET(comp_client_err_CMD "${CMAKE_BINARY_DIR}/../build-x64/runtime_output_directory/RelWithDebInfo/comp_client_err.exe")
+ELSE()
+  SET(comp_client_err_CMD comp_client_err)
+ENDIF()
+
 ADD_CUSTOM_COMMAND(OUTPUT ${PROJECT_BINARY_DIR}/include/mysqlclient_ername.h
-  COMMAND comp_client_err
+  COMMAND ${comp_client_err_CMD}
   --in_file=${PROJECT_SOURCE_DIR}/include/errmsg.h
   --out_file=${PROJECT_BINARY_DIR}/include/mysqlclient_ername.h
   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/comp_client_err.cc)
@@ -70,12 +76,18 @@ FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/${INSTALL_MYSQLSHAREDIR})
 #
 # Please see errmsg_readme.txt in the same directory for more information.
 #
+IF(WIN32 AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "ARM64")
+  SET(comp_err_CMD "${CMAKE_BINARY_DIR}/../build-x64/runtime_output_directory/RelWithDebInfo/comp_err.exe")
+ELSE()
+  SET(comp_err_CMD comp_err)
+ENDIF()
+
 ADD_CUSTOM_COMMAND(OUTPUT
   ${PROJECT_BINARY_DIR}/include/mysqld_error.h
   ${PROJECT_BINARY_DIR}/include/mysqld_ername.h
   ${PROJECT_BINARY_DIR}/include/mysqld_errmsg.h
   ${PROJECT_BINARY_DIR}/${INSTALL_MYSQLSHAREDIR}/english/errmsg.sys
-  COMMAND comp_err
+  COMMAND ${comp_err_CMD}
   --charset=${PROJECT_SOURCE_DIR}/share/charsets
   --out-dir=${PROJECT_BINARY_DIR}/${INSTALL_MYSQLSHAREDIR}/
   --header_file=${PROJECT_BINARY_DIR}/include/mysqld_error.h
